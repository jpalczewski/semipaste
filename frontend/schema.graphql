type Query {
  allPasteBin(offset: Int = null, before: String = null, after: String = null, first: Int = null, last: Int = null, title: String = null, id: ID = null): PasteBinNodeConnection
  pasteBin(
    """The ID of the object"""
    id: ID!
  ): PasteBinNode
  user: UserNode
  allUsers(offset: Int = null, before: String = null, after: String = null, first: Int = null, last: Int = null, id: ID = null): UserNodeConnection
  node(
    """The ID of the object"""
    id: ID!
  ): Node
  _debug: DjangoDebug
}

type PasteBinNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PasteBinNodeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `PasteBinNode` and its cursor."""
type PasteBinNodeEdge {
  """The item at the end of the edge"""
  node: PasteBinNode

  """A cursor for use in pagination"""
  cursor: String!
}

type PasteBinNode implements Node {
  id: ID!
  title: String!
  text: String!
  dateOfCreation: DateTime!
  exposure: Boolean!
  expireAfter: PastesPasteBinExpireAfterChoices!
  dateOfExpiry: DateTime
  author: UserNode
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""An enumeration."""
enum PastesPasteBinExpireAfterChoices {
  """never"""
  NEVER

  """1 hour"""
  HOUR

  """1 day"""
  DAY

  """1 week"""
  WEEK

  """1 month"""
  MONTH

  """1 year"""
  YEAR
}

type UserNode implements Node {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Oznacza, że ten użytkownik ma wszystkie uprawnienia bez ich jawnego przypisywania.
  """
  isSuperuser: Boolean!

  """Wymagana. 150 lub mniej znaków. Jedynie litery, cyfry i @/./+/-/_."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Określa czy użytkownik może zalogować się do panelu administracyjnego."""
  isStaff: Boolean!

  """
  Określa czy użytkownika należy uważać za aktywnego. Odznacz zamiast usuwać konto.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  description: String!
  pastebinSet(offset: Int = null, before: String = null, after: String = null, first: Int = null, last: Int = null, title: String = null, id: ID = null): PasteBinNodeConnection!
}

type UserNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserNodeEdge]!
}

"""A Relay edge containing a `UserNode` and its cursor."""
type UserNodeEdge {
  """The item at the end of the edge"""
  node: UserNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Debugging information for the current query."""
type DjangoDebug {
  """Executed SQL queries for this API query."""
  sql: [DjangoDebugSQL]

  """Raise exceptions for this API query."""
  exceptions: [DjangoDebugException]
}

"""Represents a single database query made to a Django managed DB."""
type DjangoDebugSQL {
  """The type of database being used (e.g. postrgesql, mysql, sqlite)."""
  vendor: String!

  """The Django database alias (e.g. 'default')."""
  alias: String!

  """The actual SQL sent to this database."""
  sql: String

  """Duration of this database query in seconds."""
  duration: Float!

  """The raw SQL of this query, without params."""
  rawSql: String!

  """JSON encoded database query parameters."""
  params: String!

  """Start time of this database query."""
  startTime: Float!

  """Stop time of this database query."""
  stopTime: Float!

  """Whether this database query took more than 10 seconds."""
  isSlow: Boolean!

  """Whether this database query was a SELECT."""
  isSelect: Boolean!

  """Postgres transaction ID if available."""
  transId: String

  """Postgres transaction status if available."""
  transStatus: String

  """Postgres isolation level if available."""
  isoLevel: String

  """Postgres connection encoding if available."""
  encoding: String
}

"""Represents a single exception raised."""
type DjangoDebugException {
  """The class of the exception"""
  excType: String!

  """The message of the exception"""
  message: String!

  """The stack trace"""
  stack: String!
}

type Mutation {
  addPasteBin(expireAfter: String = null, exposure: Boolean = null, text: String = null, title: String = null): AddPasteBin
  addUser(input: AddUserInput!): AddUserPayload
  editUser(description: String = null, email: String = null, firstName: String = null, id: ID!, lastName: String = null, password: String = null, username: String = null): EditUser
  editUserDescription(description: String = null, id: ID!): EditUserDescription
  deleteUser(id: ID!): DeleteUser

  """Obtain JSON Web Token mutation"""
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
  deleteTokenCookie: DeleteJSONWebTokenCookie
}

type AddPasteBin {
  ok: Boolean
}

type AddUserPayload {
  user: UserNode
  errors: [ErrorType]
  ok: Boolean
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input AddUserInput {
  password: String!
  lastLogin: DateTime

  """
  Oznacza, że ten użytkownik ma wszystkie uprawnienia bez ich jawnego przypisywania.
  """
  isSuperuser: Boolean
  groups: [ID]
  userPermissions: [ID]

  """Wymagana. 150 lub mniej znaków. Jedynie litery, cyfry i @/./+/-/_."""
  username: String!
  firstName: String
  lastName: String
  email: String

  """Określa czy użytkownik może zalogować się do panelu administracyjnego."""
  isStaff: Boolean

  """
  Określa czy użytkownika należy uważać za aktywnego. Odznacz zamiast usuwać konto.
  """
  isActive: Boolean
  dateJoined: DateTime!
  description: String!
  id: ID
  clientMutationId: String
}

type EditUser {
  ok: Boolean
}

type EditUserDescription {
  ok: Boolean
}

type DeleteUser {
  ok: Boolean
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebTokenPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

type VerifyPayload {
  payload: GenericScalar!
  clientMutationId: String
}

input VerifyInput {
  token: String
  clientMutationId: String
}

type RefreshPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

input RefreshInput {
  token: String
  clientMutationId: String
}

type DeleteJSONWebTokenCookie {
  deleted: Boolean!
}
