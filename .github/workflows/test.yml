name: Run tests
on: [push]
jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DJANGO_CONFIGURATION: Actions
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      POSTGRES_HOST: localhost

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: poetry install
      working-directory: ./backend
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    - name: Install dependencies
      run: poetry install
      working-directory: ./backend
    - name: Run migrations
      run: |
       source .venv/bin/activate
       ls
       env
       python manage.py migrate   --settings backend.settings --configuration=CI
      working-directory: ./backend
      env:
        DJANGO_CONFIGURATION: CI
    - name: Run tests
      run:  |
        source .venv/bin/activate
        pytest --cov --dc=CI
      working-directory: ./backend
      env:
        DJANGO_CONFIGURATION: CI
